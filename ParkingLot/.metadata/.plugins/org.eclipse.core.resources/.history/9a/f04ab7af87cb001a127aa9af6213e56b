package parkingLotDesign;

import java.util.ArrayList;
import java.util.HashMap;

import parkingLotDesign.Constants.ParkingSpotType;
import parkingLotDesign.Constants.ParkingStatus;

public class ParkingLot{
	static private ParkingLot Instance;
	static private ArrayList<ParkingFloor> floors;
	private HashMap<String,ParkingTicket> customers;
//	private static ArrayList<Display> floorsDisplay;

	private ParkingLot(){
		floors=new ArrayList<ParkingFloor>();
		customers=new HashMap<String,ParkingTicket>();
//		floorsDisplay=new ArrayList<Display>();
	}
	
	public static ParkingLot getParkingLotInstance() {
		if(Instance==null) {
			Instance=new ParkingLot();
		}
		return Instance;
	}

	public void addFloor(ParkingFloor parkingFloor){
		floors.add(parkingFloor);
//		floorsDisplay.add(parkingFloor.getDisplay());
	}

	public void removeFloor(ParkingFloor parkingFloor){
		floors.remove(parkingFloor);
	}

	public static boolean isAvailable(ParkingSpotType parkingSpotType){
		for(int i=0;i<floors.size();i++){
			ParkingFloor temp=floors.get(i);
			if(temp.isParkingSpotAvailable(parkingSpotType)) {
				return true;
			}
		}
		return false;
	}

	
	public static String issueParkingTicket(ParkingSpotType parkingSpotType) {
		Cell cell=null;
		String ticketId;
		int i;
		for(i=0;i<floors.size();i++){
			ParkingFloor temp=floors.get(i);
			if(temp.isParkingSpotAvailable(parkingSpotType)) {
				cell=temp.getCell(parkingSpotType);
				break;
			}
		}
		((ParkingFloor)floors.get(i)).updateMatrix(cell, ParkingStatus.OCCUPIED);
//		((Display)floorsDisplay.get(i)).();
		
		
		
		
		
		
	}
	

}