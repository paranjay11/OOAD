package parkingLotDesign;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import parkingLotDesign.Constants.ParkingSpotType;
import parkingLotDesign.Constants.ParkingStatus;

public class ParkingFloor{
	private HashMap<ParkingSpotType,HashMap<Long,Cell>> matrix;
	private int[] capacityOfMatrix;
	private int[] occupancyOfMatrix;
	private Display display;


	public ParkingFloor(){
		this.matrix=new HashMap<ParkingSpotType,HashMap<Long,Cell>>();
		this.capacityOfMatrix=new int[ParkingSpotType.values().length];
		this.occupancyOfMatrix=new int[ParkingSpotType.values().length];
		this.display=new Display();
	}

	public void setCapacityOfMatrix(int[] capacityOfMatrix){
		capacityOfMatrix=capacityOfMatrix.clone();
	}

	public void addParkingSpot(ParkingSpotType spotType,Cell cell){
		matrix.get(spotType).put(cell.getId(),cell);
	}

	public void removeParkingSpot(ParkingSpotType spotType,Cell cell){
		matrix.get(spotType).remove(cell.getId());
	}

	public Cell getCell(ParkingSpotType spotType){
		HashMap<Long,Cell> temp=matrix.get(spotType);
		for(Map.Entry mapElement : temp.entrySet()){
			ParkingStatus check=(ParkingStatus)((Cell) mapElement.getValue()).getParkingStatus();

			if(check==ParkingStatus.FREE){
				return (Cell) mapElement.getValue();
			}
		}
		occupancyOfMatrix[spotType.ordinal()]--;
	}

	public void updateMatrix(Cell cell ,ParkingStatus spotStatus){
		ParkingSpotType temp=cell.getParkingSpotType();
		cell.setParkingStatus(spotStatus);
		occupancyOfMatrix[temp.ordinal()]++;
	}

	public boolean isParkingSpotAvailable(ParkingSpotType spotType){
		return (capacityOfMatrix[spotType.ordinal()] - occupancyOfMatrix[spotType.ordinal()])>0?true:false;
	}


}

